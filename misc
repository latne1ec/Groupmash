self.device = AVCaptureDevicePositionBack;


self.capturePhotoButton.alpha = 0.0;
_recorder.recordSession = nil;

//Photo Views
self.capturedImageView = [[UIImageView alloc]init];
self.capturedImageView.frame = self.view.frame; // just to even it out
self.capturedImageView.backgroundColor = [UIColor clearColor];
self.capturedImageView.userInteractionEnabled = YES;
self.capturedImageView.contentMode = UIViewContentModeScaleAspectFill;

self.imageSelectedView = [[UIView alloc]initWithFrame:self.view.frame];
[self.imageSelectedView setBackgroundColor:[UIColor clearColor]];
[self.imageSelectedView addSubview:self.capturedImageView];

UITapGestureRecognizer *imageViewTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(imageViewTapped:)];
imageViewTap.delegate = (id) self;
imageViewTap.numberOfTapsRequired = 1;
imageViewTap.numberOfTouchesRequired = 1;
[self.capturedImageView addGestureRecognizer:imageViewTap];
UIPanGestureRecognizer *drag = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(captionDrag:)];
[self.capturedImageView addGestureRecognizer:drag];

self.photoOverlayView = [[UIView alloc]initWithFrame:CGRectMake(0, CGRectGetHeight(self.view.frame)-50, CGRectGetWidth(self.view.frame), 50)];
[self.photoOverlayView setBackgroundColor:[UIColor clearColor]];
[self.imageSelectedView addSubview:self.photoOverlayView];

UIButton *cancelPhotoButton = [[UIButton alloc]initWithFrame:CGRectMake(15,16, 38, 38)];//CGRectMake(8, 20, 32, 32)];
[cancelPhotoButton setImage:[UIImage imageNamed:@"cancelVid"] forState:UIControlStateNormal];
[cancelPhotoButton addTarget:self action:@selector(cancelSelectedPhoto:) forControlEvents:UIControlEventTouchUpInside];
[cancelPhotoButton addTarget:self action:@selector(cancelTextCaption) forControlEvents:UIControlEventTouchUpInside];
[self.imageSelectedView addSubview:cancelPhotoButton];

self.uploadPhotoButton = [[UIButton alloc] initWithFrame:CGRectMake(CGRectGetWidth(self.photoOverlayView.frame)-54, -2, 38, 38)];
[self.uploadPhotoButton setImage:[UIImage imageNamed:@"add"] forState:UIControlStateNormal];
[self.uploadPhotoButton addTarget:self action:@selector(uploadPhoto) forControlEvents:UIControlEventTouchUpInside];

[self.photoOverlayView addSubview:self.uploadPhotoButton];

_recorder = [SCRecorder recorder];
_recorder.sessionPreset = [SCRecorderTools bestSessionPresetCompatibleWithAllDevices];
_recorder.maxRecordDuration = CMTimeMake(7, 1); //
_recorder.delegate = self;
_recorder.autoSetVideoOrientation = YES;

UIView *previewView = self.previewView;
_recorder.previewView = previewView;

[self.reverseCamera addTarget:self action:@selector(handleReverseCameraTapped:) forControlEvents:UIControlEventTouchUpInside];

UIView *overlayView = [[UIView alloc]initWithFrame:CGRectMake(0, CGRectGetHeight(self.view.frame)-60, CGRectGetWidth(self.view.frame), 60)];
[overlayView setBackgroundColor:[UIColor clearColor]];
[self.view addSubview:overlayView];

self.selfieButton = [[UIButton alloc]initWithFrame:CGRectMake(CGRectGetWidth(self.view.frame)-54, 4.5, 32, 32)];
[self.selfieButton setImage:[UIImage imageNamed:@"flipCam"] forState:UIControlStateNormal];
[self.selfieButton addTarget:self action:@selector(handleReverseCameraTapped:) forControlEvents:UIControlEventTouchUpInside];
[overlayView addSubview:self.selfieButton];

self.flash = [[UIButton alloc]initWithFrame:CGRectMake(15, 18, 35, 35)];
[self.flash setImage:[UIImage imageNamed:@"flashYo"] forState:UIControlStateNormal];
[self.flash setImage:[UIImage imageNamed:@"flashOn"] forState:UIControlStateSelected];
[self.flash addTarget:self action:@selector(switchFlash:) forControlEvents:UIControlEventTouchUpInside];
[self.view addSubview:self.flash];


self.focusView = [[SCRecorderFocusView alloc] initWithFrame:previewView.bounds];
self.focusView.recorder = _recorder;
[previewView addSubview:self.focusView];

self.focusView.outsideFocusTargetImage = [UIImage imageNamed:@"capture_flip"];
self.focusView.insideFocusTargetImage = [UIImage imageNamed:@"capture_flip"];

_recorder.initializeRecordSessionLazily = YES;
[_recorder openSession:^(NSError *sessionError, NSError *audioError, NSError *videoError, NSError *photoError) {
[self prepareCamera];
}];


self.camTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(capturePhoto:)];
self.camTap.numberOfTapsRequired = 1;

//self.cameraButton = [[UIButton alloc]initWithFrame:CGRectMake(CGRectGetWidth(self.view.bounds)/2-42, CGRectGetHeight(self.view.bounds)-95, 85, 85)];
[self.cameraButton setImage:[UIImage imageNamed:@"snapPic"] forState:UIControlStateNormal];
[self.cameraButton setImage:[UIImage imageNamed:@"snapVideoSelected"] forState:UIControlStateHighlighted];
[self.cameraButton addTarget:self action:@selector(capturePhoto:) forControlEvents:UIControlEventTouchUpInside];
[self.cameraButton addGestureRecognizer:self.camTap];
[self.cameraButton addTarget:self action:@selector(recordVid) forControlEvents:UIControlEventTouchDown];
[self.cameraButton addTarget:self action:@selector(stopVid) forControlEvents:UIControlEventTouchUpInside | UIControlEventTouchUpOutside];
[self.cameraButton setTintColor:[UIColor blueColor]];
[self.cameraButton.layer setCornerRadius:20.0];
//[self.scrollView addSubview:self.cameraButton];

[[NSNotificationCenter defaultCenter] addObserver:self
selector:@selector(methodToShowViewOnTop)
name:UIApplicationDidBecomeActiveNotification object:nil];

self.menu = [[UIButton alloc]initWithFrame:CGRectMake(6, CGRectGetHeight(self.view.frame)-70, 65, 65)];
[self.menu setImage:[UIImage imageNamed:@"dasMenu"] forState:UIControlStateNormal];
//[self.menu addTarget:self action:@selector(ScrollToHomeView) forControlEvents:UIControlEventTouchUpInside];
[self.view addSubview:self.menu];

[self.videoProgress setTransform:CGAffineTransformMakeScale(1.0, 20.0)];
[self.videoProgress setProgress:0.f];

self.filterSwitcherView = [[SCSwipeableFilterView alloc] initWithFrame:CGRectMake(0,
0,
[[UIScreen mainScreen] bounds].size.width,
[[UIScreen mainScreen] bounds].size.height)];

UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] init];
longPress.delegate = self;
longPress.minimumPressDuration = 0.05;
[longPress addTarget:self action:@selector(makeButtonBounce:)];

UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] init];
tap.delegate = self;
tap.numberOfTapsRequired = 1;
[tap addTarget:self action:@selector(makeButtonBounce:)];

[self.menu addGestureRecognizer:longPress];
[self.menu addGestureRecognizer:tap];
